[
["index.html", "Eine Einführung in R für die sozioökonomische Forschung Chapter 1 Vorbemerkungen", " Eine Einführung in R für die sozioökonomische Forschung Claudius Gräbner 2019-10-15 Chapter 1 Vorbemerkungen Das ist die Index Seite. "],
["intro.html", "Chapter 2 Erste Schritte 2.1 Allgemeine Infos zu R 2.2 Installation von R 2.3 Die R Studio Oberfläche 2.4 Einrichtung eines R Projekts", " Chapter 2 Erste Schritte 2.1 Allgemeine Infos zu R Geschichte Dialekte 2.2 Installation von R Die Installation von R ist in der Regel unproblematisch. Auf der R homepage wählt man unter dem Reiter ‘Download’ den Link ‘CRAN’ aus, wählt einen Server in der Nähe und lädt sich dann die R Software herunter. Danach folgt man den Installationshinweisen. Im zweiten Schritt muss noch das Programm ‘R-Studio’ installiert werden. Hierbei handelt es sich um eine grafische Oberfläche für R, welche uns die Arbeit enorm erleichtern wird. Das Programm kann hier heruntergeladen werden. Bitte darauf achten ‘RStuio Desktop’ zu installieren. 2.3 Die R Studio Oberfläche Nach dem Installationsprozess öffnen wir R Studio zum ersten Mal. Der folgende Screenshop zeigt die verschiedenen Elemente der Oberfläche, deren Funktion im folgenden kurz erläutert wird. Vieles ergibt sich hier aber auch durch working by doing. Im folgenden werden nur die Bereiche der Oberfläche beschrieben, die am Anfang unmittelbar relevant für uns sind. knitr::include_graphics(&quot;figures/r-studio-light-marked.png&quot;) Der Skriptbereich (1) ist ein Texteditor wie Notepad - nur mit zusätzlichen Features wie Syntax Highlighting für R, sodass es uns leichter fällt R Code zu schreiben. Hier werden wir unsere Skripte verfassen. Die Konsole (2) erlaubt es uns über R direkt mit unserem Computer zu interagieren. R ist eine Programmiersprache. Das bedeutet, wenn wir den Regeln der Sprache folgen und uns in einer für den Computer verständlicher Art und Weise ausdrücken, versteht der Computer was wir von ihm wollen und führt unsere Befehle aus. Wenn wir in die Konsole z.B. 2+2 eingeben, dann ist das valider R code. Wenn wir dann Enter drücken versteht der Computer unseren Befehl und führt die Berechnung aus. Die Konsole ist sehr praktisch und den Effekt von R Code direkt zu beobachten. Wenn wir etwas in der Console ausführen wollen, das wir vorher im Skriptbereich geschrieben haben, können wir den Text markieren und dann auf den Button Run (3) drücken: dann kopiert R Studio den Code in die Konsole und führt ihn aus. Für den Bereich oben rechts haben wir in der Standardkonfiguration von R Studio drei Optionen, die wir durch Klicken auf die Reiter auswählen können. Der Reiter Environment (4) zeigt uns alle bisher definierten Objekte an (mehr dazu später). Der Reiter History (5) zeigt an, welchen Code wir in der Vergangenheit ausgeführt haben. Der Reiter Connections (6) braucht uns aktuell nicht zu interessieren. Auch für den Bereich unten rechts haben wir mehrere Optionen: Der Bereich Files (7) zeigt uns unser Arbeitsverzeichnis mit allen Ordnern und Dateien an. Das ist das gleichte, was wir auch über den File Explorer unserer Betriebssystems sehen würden. Der Bereich Plots (8) zeigt uns eine Vorschau der Abbildungen, die wir durch unseren Code produzieren. Die anderen Bereiche brauchen uns aktuell noch nicht zu interessieren. Wenn wir ein neues R Skript erstellen wollen, können wir das über den Button Neu (9) erledigen. Wir klicken darauf und wählen die Option ‘R Skript’. Mit den alternativen Dateiformaten brauchen wir uns aktuell nicht beschäftigen. Der Botton Neues Projekt anlegen (10) erstellt eine neues R Studio Projekt - mehr dazu in Kürze. Der Button Öffnen (11) öffnet Dateien im Skriptbereich. Die beiden Buttons Speichern (12) und Alles speichern (13) speichern das aktuelle, bzw. alle im Skriptbereich geöffnenten Dateien. Die restlichen Buttons und Fenster in R Studio werden wir im Laufe der Zeit kennenlernen. Es macht Sinn, sich einmal die möglichen Einstellungsmöglichkeiten für R Studio anzuschauen und ggf. eine andere Darstellungsversion zu wählen. 2.4 Einrichtung eines R Projekts Im folgenden werden wir lernen wie man ein neues R Projekt anlegt, R Code schreiben und ausführen kann. 2.4.1 Ein Projekt anlegen Wann immer wir ein neues Programmierprojekt starten sollten wir dafür einen eigenen Ordner anlegen und ein so genannten ‘R Studio Projekt’ erstellen. Das hilft uns den Überblick über unsere Arbeit zu behalten, und macht es einfach Code untereinander auszutauschen. Ein Programmierprojekt kann ein Projekt für eine Hausarbeit sein, die Mitschriften für eine Vorlesungseinheit, oder einfach der Versuch ein bestimmtes Problem zu lösen, z.B. einen Datensatz zu visualisieren. Die Schritte zur Erstellung eines solchen Projekts sind immer die gleichen: Einen Ordner für das Projekt anlegen. Ein R-Studio Projekt in diesem Ordner erstellen. Relevante Unterordner anlegen. Wir beschäftigen uns mit den Schritten gleich im Detail, müssen vorher aber noch die folgenden Konzepte diskutieren: (1) das Konzept eines Arbeitsverzeichnisses (working directory) und (2) die Unterscheidnug zwischen absoluten und relativen Pfaden. 2.4.1.1 Arbeitsverzeichnisse und Pfade Das Arbeitsverzeichnis ist ein Ordner auf dem Computer, in dem R standardmäßig allen Output speichert. Wenn wir mit Projekten arbeiten ist das Arbeitsverzeichnis der Ordner, in dem das R-Projektfile abgelegt ist, ansonsten ist es euer Benutzerverzeichnis. Wir können uns das Arbeitsverzeichnis mit der Funktion getwd() anzeigen lassen. In meinem Fall ist das Arbeitsverzeichnis das folgende: ## [1] &quot;/Users/claudius/work-claudius/general/paper-projects/packages/SocioEconMethodsR&quot; Wenn ich R nun sagen würde ein File unter dem Namen test.pdf speichern, würde es am folgenden Ort gespeichert werden: ## [1] &quot;/Users/claudius/work-claudius/general/paper-projects/packages/SocioEconMethodsR/test.pdf&quot; R geht in einem solchen Fall immer vom Arbeitsverzeichnis aus. Da wir im vorliegenden Fall den Speicherort relativ zum Arbeitsverzeichnis angegeben haben,sprechen wir hier von einem relativen Pfad. Alternativ können wir den Speicherort auch als absoluten Pfad angeben. In diesem Fall geben wir den kompletten Pfad, ausgehend vom Root Verzeichnis des Computers, an. Wir würden R also explizit auffordern, das File an foldengem Ort zu speichern: ## [1] &quot;/Users/claudius/work-claudius/general/paper-projects/packages/SocioEconMethodsR/test.pdf&quot; Wir werden hier immer relative Pfade verwenden. Relative Pfade fast immer die bessere Variante, da es uns erlaubt den gleichen Code auf verschiedenen Computern zu verwenden. Denn wir man an den absoluten Pfaden hier erkennen kann, sehen diese auf jedem Computer anders aus und es ist dementsprechend schwierig, Code miteinander zu teilen. Wir lernen mehr über dieses Thema wenn wir uns später mit Dateninput und -output beschäftigen. 2.4.1.2 Schritt 1: Projektordner anlegen Zuerst müssen Sie sich für einen Ordner auf Ihrem Computer entscheiden, in dem alle Daten, die mit ihrem Projekt zu tun haben, also Daten, Skripte, Abbildungen, etc. gespeichert werden sollen und diesen Ordner gegebenenfalls neu erstellen. Es macht Sinn, einen solchen Ordner mit einem informativen Namen ohne Leer- und Sonderzeichen zu versehen, z.B. SoSe19-Methodenkurs. Dieser Schritt kann theoretisch auch gemeinsam mit Schritt 2 erfolgen. 2.4.1.3 Schritt 2: Ein R-Studio Projekt im Projektordner erstellen Wir möchten nun R Studio mitteilen den in Schritt 1 erstellten Ordner als R Projekt zu behandeln. Damit wird nicht nur dieses Ordner als Root-Verzeichnis festgelegt, man kann auch die Arbeitshistorie eines Projekts leich wiederherstellen und es ist einfacher, das Projekt auf verschiedenen Computern zu bearbeiten. Um ein neues Projekt zu erstellen klickt ihr in R Studio auf den Button Neues Projekt (Nr. 10 in der obigen Abbildung) und ihr solltet folgendes Fenster sehen: knitr::include_graphics(&quot;figures/r-studio-new-project.png&quot;) Falls ihr in Schritt 1 den Projektordner bereits erstellt habt wählt ihr hier Existing Directory, ansonsten erstellt ihr einen neuen Projektordner gleich mit dem Projektfile mit indem Sie New Directory auswählen. Falls Sie Existing Directory gewählt haben, wählen Sie in folgendem Fenster einfach den vorher erstellten Ordner aus und klickt auf Create Project. knitr::include_graphics(&quot;figures/r-studio-new-project-exis-dir.png&quot;) Falls Sie New Directory gewählt habt landen Sie auf folgendem Fenster: knitr::include_graphics(&quot;figures/r-studio-new-project-new-dir.png&quot;) Hier wählt ihr New Project aus, gebt dem Projekt in folgenden Fenster einen Namen (das wird der Name des Projektordners sein), wählt den Speicherort für den Ordner aus und klickt auf Create Project. In beiden Fällen wurde nun ein Ordner erstellt, in dem sich ein File ***.RPorj befindet. Damit ist die formale Erstellung eines Projekts abgeschlossen. Es empfiehlt sich jedoch dringend gleich eine sinnvolle Unterordnerstruktur mit anzulegen. 2.4.1.4 Scritt 3: Relevante Unterordner erstellen Eine sinnvolle Unterordnerstruktur hilf (1) den Überblick über das eigene Projekt nicht zu verlieren, (2) mit anderen über verschiedene Computer hinweg zu kollaborieren und (3) Kollaborationsplattformen wie Github zu verwenden und replizierbare und für andere nachvollziehbare Forschungsarbeit zu betreiben. Die folgende Ordnerstruktur ist eine Empfehlung. In manchen Projekten werden Sie nicht alle hier vorgeschlagenen Unterordner brauchen, in anderen bietet sich die Verwendung von mehr Unterordnern an. Nichtsdestotrotz ist es ein guter Ausgangspunkt, den ich in den meisten meiner Forschungsprojekte auch so verwende. Insgesamt sollten die folgenden Ordner im Projektordner erstellt werden: Ein Ordner data, der alle Daten enthält, die im Rahmen des Projekts verwendet werden. Hier empfiehlt es sich zwei Unterordner anzulegen: Einen Ordner raw, der die Rohdaten enthält, so wie sie aus dem Internet runtergeladen wurden. Diese Rohdaten sollten niemals verändert werdden, ansonsten wird Ihre Arbeit nicht vollständig replizierbar werden und es kommt ggf. zu irreparablen Schäden. Alle Veränderungen der Daten sollten durch Skripte dokumentiert werdenn, die die Rohdaten als Input, und einen modifizierten Datensatz als Output generieren. Dieser modifizierte Datensatz sollte dann in Unterordner tidy gespeichert werden. Beispiel: Sie laden sich Daten zum BIP in Deutschland von Eurostat und Daten zu Arbeitslosigkeit von AMECO herunter. Beiden Datensätze sollten im Unterordner data/raw gespeichert werden. Mit einem Skript lesen Sie beide Datensätze ein und erstellen den kombinierten Datensatz macro_data.csv, den Sie im Ordner data/tidy speichern und für die weitere Analyse verwenden. Dadurch kann jede*r nachvollziehen wie die von Ihnen verwendeten Daten sich aus den Rohdaten ergeben haben und Ihre Arbeit bleibt komplett transparent. Ein Ordner R, der alle R Skripte enthält, also alle Textdokumente, die R Code enthalten. Ein Ordner output, in dem der Output ihrer Berechnungen, z.B. Tabellen oder Plots gespeichert werden können. Der Inhalt dieses Ordners sollte sich komplett mit den Inhalten der Ordner data und R replizieren lassen. Ein Ordner text, in dem Sie Ihre Verschriftlichungen speichern, z.B. das eigentliche Forschungspapier, ihre Hausarbeit oder Ihre Vorlesungsmitschriften. Einen Ordner misc in den Sie alles packen, was in keinen der anderen Ordner passt. Ein solcher Ordner ist wichtig und sie sollten nicht zuordbare Dateien nie in den Projektordner als solchen speichern. Wenn wir annehmen unser Projektordner heißt 2019-Methoden ergibt sich damit insgesamt folgende Ordner und Datenstruktur: 2019-Methoden │ 2019-Methoden.Rproj │ +---data │ │ │ +---raw │ | │ Rohdaten.csv | | | +---tidy | | BearbeiteteDaten.csv +---R | | Skript1.R | +---output | | Abbildung1.pdf | +---text | | MeineNotizen.txt | +---misc | | AlterStuff.doc | | Reading5.pdf 2.4.1.5 Abschließende Bemerkungen Eine gute Ordnerstruktur ist nicht nur absolut essenziell um selbst einen Überblick über seine Forschungsprojekte zu behalten, sondern auch wenn man mit anderen Menschen kollaborieren möchte. In einem solchen Fall sollte man auf jeden Fall eine Versionskontrolle wie Git und GitHub verwenden. Wir werden uns damit im nächsten Semester genauer beschäftigen, aber Sie werden merken, dass die Kollaboration durch eine gut durchdachte Ordnerstruktur massiv erleichtert wird. "],
["basics.html", "Chapter 3 Erste Schritte in R 3.1 Befehle in R an den Computer übermitteln 3.2 Objekte, Funktionen und Zuweisungen 3.3 Zwischenbillanz 3.4 Grundlegende Objeke in R 3.5 Libraries 3.6 Kurzer Exkurs zum Einlesen und Schreiben von Daten", " Chapter 3 Erste Schritte in R Nach diesen (wichtigen) Vorbereitungsschritten wollen wir nun mit dem eigentlichen Programmieren anfangen. Zu diesem Zweck müssen wir uns mit der Syntax von R vertraut machen, also den Regeln, denen wir folgen müssen, wenn wir Code schreiben, damit der Computer versteht, was wir ihm eigentlich in R sagen wollen. 3.1 Befehle in R an den Computer übermitteln Grundsätzlich können wir über R Studio auf zwei Arten mit dem Computer “kommunizieren”: über die Konsole direkt, oder indem wir im Skriptbereit ein Skript schreiben und dies dann ausführen. Als Beispiel für die erste Möglichkeit wollen wir mit Hilfe von R die Zahlen 2 und 5 miteinander addieren. Zu diesem Zweick können wir einfach 2 + 2 in die Konsole eingeben, und den Begehl mit ‘Enter’ an den Computer senden. Da es sich beim Ausdruck 2 + 3 um korrekten R Code handelt, ‘versteht’ der Computer was wir von uns wollen und gibt uns das entsprechende Ergebnis aus: 2 + 3 ## [1] 5 Auf diese Art und Weise könne wir R als einfachen Taschenrechner verwenden, denn für alle einfachen mathematischen Operationen können wir bestimmte Symbole als Operatoren verwenden. An dieser Stelle sei noch darauf hingewiesen, dass das Symbol # in R einen Kommentar einleitet, das heißt alles was in einer Zeile nach # steht wird vom Computer ignoriert und man kann sich einfach Notizen in seinem Code machen. 2 + 2 # Addition ## [1] 4 2/2 # Division ## [1] 1 4*2 # Multiplikation ## [1] 8 3**2 # Potenzierung ## [1] 9 Alternativ können wir die Befehle in einem Skript aufschreiben, und dieses Skript dann ausführen. Während die Interaktion über die Konsole sinnvoll ist um die Effekte bestimmter Befehle auszuprobieren, bietet sich die Verwendung von Skripten an, wenn wir mit den Befehlen später weiter arbeiten wollen, oder sie anderen Menschen zugänglich zu machen. Die Berechnungen, die wir bisland durchgeführt haben sind zugegebenermaßen nicht sonderlich spannend. Um fortgeschrittene Operationen in R durchführen und verstehen zu können müssen wir uns zunächst mit den Konzepten von Objekten, Funktionen und Zuweisungen beschäftigen. 3.2 Objekte, Funktionen und Zuweisungen To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call. —John Chambers Mit der Aussage ‘Alles in R ist ein Objekt’ ist gemeint, dass jede Zahl, jede Funktion, oder jeder Buchstabe in R ein Objekt ist, das irgendwo auf dem Speicher Ihres Rechners abgespeichert ist. In der Berechnung 2 + 3 ist die Zahl 2 genauso ein Objekt wie die Zahl 3 und die Additionsfunktion, die durch den Operator + aufgerufen wird. Mit der Aussage ‘Alles was in R passiert ist ein Funktionsaufruf’ ist gemeint, dass wenn wir R eine Berechnung durchführen lassen, tun wir dies indem wir eine Funktion aufrufen. Funktionen sind Algorithmen, die bestimmte Routinen auf einen Input anwenden und dabei einen Output produzieren. Die Additionsfunktion, die wir in der Berechnung 2 + 3 aufgerufen haben hat als Input die beiden Zahlen 2 und 3 aufgenommen, hat auf sie die Routine der Addition angewandt und als Output die Zahl 5 ausgegeben. Der Output 5 ist dabei in R genauso ein Objekt wie die Inputs 2 und 3, sowie die Funktion +. Ein ‘Problem’ ist, dass R im vorliegenden Falle den Output der Berechnung zwar ausgibt, wir danach aber keinen Zugriff darauf mehr haben: 2 + 3 ## [1] 5 Falls wir den Output weiterverwenden wollen, macht es Sinn, dem Output Objekt einen Namen zu geben, damit wir später wieder darauf zugreifen können. Der Prozess einem Objekt einen Namen zu Geben wird Zuweisung oder Assignment genannt und durch die Funktion assign vorgenommen: assign(&quot;zwischenergebnis&quot;, 2 + 3) Wir können nun das Ergebnis der Berechnung 2 + 3 aufrufen, indem wir in R den Namen des Output Objekts eingeben: zwischenergebnis ## [1] 5 Da Zuweisungen so eine große Rolle spielen und sehr häufig vorkommen gibt es auch für die Funktion assign eine Kurzschreibweise, nämlich &lt;-. Entsprechend sind die folgenden beiden Befehle äquivalent: assign(&quot;zwischenergebnis&quot;, 2 + 3) zwischenergebnis &lt;- 2 + 3 Entsprechend werden wir Zuweisungen immer mit dem &lt;- Operator durchführen.1 Wir können in R nicht beliebig Namen vergeben. Gültige (also: syntaktisch korrekte) Namen … enthalten nur Buchstaben, Zahlen und die Symbole . und _ fangen nicht mit . oder einer Zahl an! Zudem gibt es einige Wörter, die schlicht nicht als Name verwendet werden dürgen, z.B. function, TRUE, oder if. Die gesamte Liste verbotener Worte kann mit dem Befehl ?Reserved ausgegeben werden. Wenn man einen Namen vergeben möchte, der nicht mit den gerade formulierten Regeln kompatibel ist, gibt R eine Fehlermeldung aus: TRUE &lt;- 5 ## Error in TRUE &lt;- 5: invalid (do_set) left-hand side to assignment Zudem sollte man folgendes beachten: Namen sollten kurz und informativ sein; entsprechen ist sample_mean ein guter Name, shit15_2 dagegen eher weniger Man sollte nie Umlaute in Namen verwenden Auch wenn möglich, sollte man nie von R bereit gestellte Funktionen überschreiben. Eine Zuweisung wie assign &lt;- 2 ist zwar möglich, führt in der Regel aber zu großem Unglück, weil man nicht mehr ganz einfach auf die zugrundeliegende Funktion zurückgreifen kann. Hinweis: Alle aktuellen Namenszuweisungen sind im Bereich Environment in R Studio (Nr. 4 in der Abbildung oben) aufgelistet und können durch die Funktion ls() angezeigt werden. Hinweis: Ein Objekt kann mehrere Namen haben, aber kein Name kann zu mehreren Objekten zeigen, da im Zweifel eine neue Zuweisung die alte Zuweisung überschreibt: x &lt;- 2 y &lt;- 2 # Das Objekt 2 hat nun zwei Namen print(x) ## [1] 2 print(y) ## [1] 2 x &lt;- 4 # Der Name &#39;x&#39; zeigt nun zum Objekt &#39;4&#39;, nicht mehr zu &#39;2&#39; print(x) ## [1] 4 Aus dem bisher gelernten wurde deutlich, dass es sich sowohl bei assign als auch bei + um Funktionen handelt. Merkwürdig erscheint zunächst nur wie unterschiedlich diese Funktionen verwendet werden: Im Falle von assign schreiben wir zuerst den Funktionsnamen und dann in Klammern die unterschiedlichen Argumente der Funktion, im Falle von + schreiben wir den Funktionsnamen zwischen die Argumente der Funktion. Dies liegt daran, dass es in R prinzipiell vier verschiedene Arten gibt, Funktionen aufzurufen. Nur zwei davon sind allerdings aktuell von uns relevant. Die bei weitem wichtigste Variante ist die so genannte Prefix-Form. Dies ist die Form, die wir bei der überwältigenden Anzahl von Funktionen verwenden werden. Wir schreiben hier zunächst den Namen der Funktion (im Folgenden Beispiel assign), dann in Klammern die Argumente der Funktion, welche den Input und weitere Spezifikationen beinhalten (hier der Name test und die Zahl 2): assign(&quot;test&quot;, 2) Ein hin und wieder auftretende Form ist die so genannte Infix-Form. Hier wird der Funktionsname zwischen die Argumente geschrieben. Dies ist, wie wir oben bereits bemerkt haben, bei vielen mathematischen Funktionen wie +, - oder / der Fall. Streng genommen ist die die Infix-Form aber nur eine Abkürzung, denn jeder Funktionsaufruf in Infix-Form kann auch in Prefix-Form geschrieben werden, wie folgendes Beispiel zeigt: 2 + 3 ## [1] 5 `+`(2,3) ## [1] 5 3.3 Zwischenbillanz Wir können Befehle in R Studio an den Computer übermitteln indem wir (a) den R Code in die Konsole schreiben und Enter drücken oder (b) den Code in ein Skript schreiben und dann ausführen Alles in R existiert ist ein Objekt, alles was in R passiert ist ein Funktionenaufruf Wir können einem Objekt mit Hilfe von &lt;- einen Namen geben und dann später wieder aufrufen. Den Prozess der Namensgebung nennen wir Assignment und wir können uns alle aktuell von uns vergebenen Namen mit der Funktion ls() anzeigen lassen. Eine Funktion ist ein Objekt, das auf einen Input eine bestimmte Routine anwendet und einen Output produziert Die wichtigste Art, Funktionen aufzurufen ist, ihren Namen zu schreiben und danach die Argumente in Klammern anzugeben (Prefix Form, z.B. assign(&quot;x&quot;, 2)) Gerade bei mathematischen Funktionen wie + und - verwenden wir auch die Infix Form, bei der die Argumente vor und nach dem Funktionsnamen stehen (z.B. 2 + 3) 3.4 Grundlegende Objeke in R Wir haben bereits gelernt, dass alles was in R existiert ein Objekt ist. Wir haben aber auch schon gelernt, dass es unterschiedliche Arten von Objekten gibt: Zahlen, wie 2 oder 3 und Funktionen wie assign. Tatsächlich gibt es noch viel mehr Arten von Objekten. Ein gutes Verständnis der Objektarten ist Grundvoraussetzung später anspruchsvolle Programmierarufgaben zu lösen. Daher wollen wir uns im folgenden mit den wichtigsten Objektarten in R auseinandersetzen. 3.4.1 Vektoren Vektoren sind einer der wichtigsten Objettypen in R. Quasi alle Daten mit denen wir in R arbeiten werden als Vektoren behandelt werden. Was Vektoren angeht gibt es wiederum die wichtige Unterscheidung von atomaren Vektoren und Listen. Beide bestehen ihrerseits aus Objekten und sie unterscheiden sich dadurch, dass atomare Vektoren nur aus Objekten des gleichen Typs bestehen können, Listen dagegen auch Objekte unterschiedlichen Typs beinhalten können. Entsprechend kann jeder atomare Vektor einem Typ zugeordnet werden, je nachdem welchen Typ seine Bestandteile haben. Hier sind insbesondere vier Typen relevant: Logische Werte (logical): es gibt zwei logische Werte, TRUE und FALSE, welche auch mit T oder F abgekürzt werden können Ganze Zahlen integer: das sollte im Prinzip selbsterklärend sein, allerding müssen den ganzen Zahln in R immer der Buchstabe Lfolgen, damit die Zahl tatsächlich als ganze Zahl interpretiert wird.2 Beispiele sind 1L, 400L oder 10L. Dezimalzahlen double: auch das sollte selbsterklärend sein; Beispiele wären 1.5, 0.0, oder -500.32. Ganze Zahlen und Dezimalzahlen werden häufig unter der Kategorie numeric zusammengefasst. Dies ist in der Praxis aber quasi nie hilfreich und man sollte diese Kategorie möglichst nie verwenden. Wörter (character): sie sind dadurch gekennzeichnet, dass sie auch Buchstaben enthalten können und am Anfang und Ende ein &quot; haben. Beispiele hier wären &quot;Hallo&quot;, &quot;500&quot; oder &quot;1_2_Drei&quot;. Es gibt noch zwei weitere besondere ‘Typen’, die strikt gesehen keine atomaren Vektoren darstellen, allerdings in diesem Kontext schon häufig auftauchen: NULL, was strikt genommen ein eigener Datentyp ist und immer die Länge 0 hat, sowie NA, das einen fehlenden Wert darstellt Hieraus ergibt sich folgende Aufteilung für Vektoren: Wir werden nun die einzelnen Typen genauer betrachten. Vorher wollen wir jedoch noch die Funktion typeof einführen. Sie hilft uns in der Praxis den Typ eines Objekts herauszufinden. Dafür rufen wir einfach die Funktion typeof mit dem zu untersuchenden Objekt oder dessen Namen auf: typeof(2L) ## [1] &quot;integer&quot; x &lt;- 22.0 typeof(x) ## [1] &quot;double&quot; Wir können auch explizit testen ob ein Objekt ein Objekt bestimmten Typs ist. Die generelle Syntax hierfür ist: is.*(), also z.B.: x &lt;- 1.0 print( is.integer(x) ) ## [1] FALSE print( is.double(x) ) ## [1] TRUE Die Funktion gibt als Output also immer einen logischen Wert aus, je nachdem ob die Inputs des entsprechenden Typs sind oder nicht. Bestimmte Objekte können in einen anderen Typ transformiert werden. Hier spricht man von coercion und die generelle Syntax hierfür ist: as.*(), also z.B.: x &lt;- &quot;2&quot; print( typeof(x) ) ## [1] &quot;character&quot; x &lt;- as.double(x) print( typeof(x) ) ## [1] &quot;double&quot; Allerdings ist eine Transformation nicht immer möglicht: as.double(&quot;Hallo&quot;) ## Warning: NAs introduced by coercion ## [1] NA Da R nicht weiß wie man aus dem Wort ‘Hallo’ eine Dezimalzahl machen soll, transformiert er das Wort in einen ‘Fehlenden Wert’, der in R als NA bekannt ist und unten noch genauer diskutiert wird. Für die Grundtypen ergibt sich folgende logische Hierachie an trivialen Transformationen: logical → integer → double → character, d.h. man kann eine Dezimalzahl ohne Probleme in ein Wort transformieren, aber nicht umgekehrt: x &lt;- 2 y &lt;- as.character(x) print(y) ## [1] &quot;2&quot; z &lt;- as.double(y) # Das funktioniert print(z) ## [1] 2 k &lt;- as.double(&quot;Hallo&quot;) # Das nicht ## Warning: NAs introduced by coercion print(k) ## [1] NA Da nicht immer ganz klar ist wann R bei Transformationen entgegen der gerade eingeführten Hierachie eine Warnung ausgibt und wann nicht sollte man hier immer besondere Vorsicht walten lassen! Zudem ist bei jeder Transformation Vorsicht geboten, da sie häufig Eigenschaften der Objekte implizit verändert. So führt eine Transformation von einer Dezimalzahl hin zu einer ganzen Zahl teils zu unerwartetem Rundungsverhalten: x &lt;- 1.99 as.integer(x) ## [1] 1 Auch führen Transformationen, die der eben genannten Hierachie zuwiderlaufen nicht zwangsweise zu Fehlern, sondern ‘lediglich’ zu unerwarteten Änderungen, die in jedem Fall vermieden werden sollten: z &lt;- as.logical(99) print(z) ## [1] TRUE Häufig transformieren Funktionen ihre Argumente automatisch, was meistens hilfreich ist, manchmal aber auch gefährlich sein kann: x &lt;- 1L # Integer y &lt;- 2.0 # Double z &lt;- x + y typeof(z) ## [1] &quot;double&quot; Interessanterweise werden logische Werte ebenfalls transformiert: x &lt;- TRUE y &lt;- FALSE z &lt;- x + y # TRUE wird zu 1, FALSE zu 0 print(z) ## [1] 1 Daher sollte man immer den Überblick behalten, mit welchen Objekttypen man gerade arbeitet. Hier noch ein kurzer Überblick zu den Test- und Transformationsbefehlen: Typ Test Transformation logical is.logical as.logical double is.double as.double integer is.integer as.integer character is.character as.character function is.function as.function NA is.na NA NULL is.null as.null Ein letzter Hinweis zu Skalaren. Unter Skalaren verstehen wir häufig ‘einzelne Zahlen’, z.B. 2. Dieses Konzept gibt es in R nicht. 2 ist ein Vektor der Länge 1. Wir unterscheiden also vom Typ her nicht zwischen einem Vektor, der nur ein oder mehrere Elemente hat. Hinweis: Um längere Vektoren zu erstellen, verwenden wir die Funktion c(): x &lt;- c(1, 2, 3) x ## [1] 1 2 3 Da atomare Vektoren immer nur Objekte des gleichen Typs enthalten können, könnte man erwarten, dass es zu einem Fehler kommt, wenn wir Objete unterschiedlichen Type kombinieren wollen: x &lt;- c(1, &quot;Hallo&quot;) Tatsächlich transformiert R die Objekte allerdings nach der oben beschriebenen Hierachie logical → integer → double → character. Da hier keine Warnung oder kein Fehler ausgegeben wird, sind derlei Transformationen eine gefährliche Fehlerquelle! Hinweis: Die Länge eines Vektors kann mit der Funktion length bestimmt werden: x = c(1, 2, 3) len_x &lt;- length(x) len_x ## [1] 3 3.4.2 Ganze Zahlen und Dezimalzahlen (integer und double) 3.4.3 Logische Werte (logical) 3.4.4 Wörter (character) 3.4.5 Fehlende Werte und NULL 3.4.6 Matrizen und Arrays 3.4.7 Listen 3.4.8 Data Frames 3.4.9 Funktionen 3.4.10 Optional: Namespaces 3.4.11 Optional: Klassen in R class vs mode: unclass function 3.5 Libraries Was sind libraries? Wie installiert man sie? Wie installiert man von GitHub? Wie verwendet man sie? Immer am Anfang vom Skript verwenden Wie findet man libraries? 3.6 Kurzer Exkurs zum Einlesen und Schreiben von Daten Zum Abschluss wollen wir noch kurz einige Befehle zum Einlesen von Daten einführen. Später werden wir uns ein ganzes Kapitel mit dem Einlesen und Schreiben von Daten beschäftigen, da dies in der Regel einen nicht unbeträchtlichen Teil der quantitativen Forschungsarbeit in Anspruch nimmt. An dieser Stelle wollen wir aber nur lernen, wie man einen angemessenen Datensatz in R einliest. R kann zahlreiche verschiedene Dateiformate einlesen, z.B. csv, dta oder txt, auch wenn für manche Formate bestimmte Libraries geladen sein müssen. Das gerade für kleinere Datensätze mit Abstand beste Format ist in der Regel csv, da ist von zahlreichen Programmen und auf allen Betriebssystemen gelesen und geschrieben werden kann. Für die Beispiele hier nehmen wir folgende Ordnerstruktur an: 2019-Methoden │ 2019-Methoden.Rproj │ +---data │ │ │ +---raw │ | │ Rohdaten.csv | | | +---tidy Um die Daten einzulesen verwenden wir das Paket tidyverse, die wir später genauer kennen lernen werden. Sie enthält viele nützliche Funktionen zur Arbeit mit Datensätzen. Zudem verwende ich das Paket here um relative Pfade immer von meinem Arbeitsverzeichnis aus angeben zu können.3 library(tidyverse) library(here) Nehmen wir an, die Datei Rohdaten.csv sähe folgendermaßen aus: Auto,Verbrauch,Zylinder,PS Ford Pantera L,15.8,8,264 Ferrari Dino,19.7,6,175 Maserati Bora,15,8,335 Volvo 142E,21.4,4,109 Wie in einer typischen csv Datei sind die Spalten hier mit einem Komma getrennt. Um diese Datei einzulesen verwenden wir die Funktion read_csv mit dem Dateipfad als erstes Argument: auto_daten &lt;- read_csv(here(&quot;data/raw/Rohdaten.csv&quot;)) auto_daten ## # A tibble: 4 x 4 ## Auto Verbrauch Zylinder PS ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Ford Pantera L 15.8 8 264 ## 2 Ferrari Dino 19.7 6 175 ## 3 Maserati Bora 15 8 335 ## 4 Volvo 142E 21.4 4 109 Wir haben nun einen Datensatz in R, mit dem wir dann weitere Analysen anstellen können. Nehmen wir einmal an, wir wollen eine weitere Spalte hinzufügen (Verbrauch/PS) und dann den Datensatz im Ordner data/tidy speichern. Ohne auf die Modifikation des Data Frames einzugehen können wir die Funktion write_csv verwenden um den Datensatz zu speichern. Hierzu geben wir den neuen dataframe als erstes, und den Pfad als zweites Argument an: auto_daten_neu &lt;- auto_daten %&gt;% mutate(Verbrauch_pro_PS=Verbrauch/PS) write_csv(auto_daten_neu, here(&quot;data/tidy/NeueDaten.csv&quot;)) Einfache Beispiele zum Einlesen von Daten Mehr dazu in der dritten Section Theoretisch kann &lt;- auch andersherum verwendet werden: 2 + 3 -&gt; zwischenergebnis. Das mag zwar auf den ersten Blick intuitiver erscheinen, da das aus 2 + 3 resultierende Objekt den Namen zwischenergebnis bekommt, also immer erst das Objekt erstellt wird und dann der Name zugewiesen wird, es führt jedoch zu deutlich weniger lesbarem Code und sollte daher nie verwendet werden. Ebensoweinig sollten Zuweisungen durch den = Operatur vorgenommen werden, auch wenn es im Fall zwischenergebnis = 2 + 3 funktionieren würde. Namen zwischenergebnis.↩ Diese auf den ersten Blick merkwürdige Syntax hat historische Gründe: als der integer Typ in die R Programmiersprache eingeführt wurde war er sehr stark an den Typ long integer in der Programmiersprache ‘C’ angelehnt. In C wurde ein solcher ‘long integer’ mit dem Suffix ‘l’ oder ‘L’ definiert, diese Regel wurde aus Kompatibilitätsgründen auch für R übernommen, jedoch nur mit ‘L’, da man Angst hatte, dass ‘l’ mit ‘i’ verwechselt wird, was in R für die imaginäre Komponente komplexer Zahlen verwendet wird.↩ Das ist notwendig, da dieses Skript in R Markdown geschrieben ist und das Arbeitsverzeichnis automatisch auf den Ordner ändert, in dem das .Rmd file liegt. Mehr Information zum Schreiben von R Markdown finden Sie im Anhang. Dieser wird auch in der Vorlesung besprochen.↩ "]
]
